require 'rails_helper'

# This spec was generated by rspec-rails when you ran the scaffold generator.
# It demonstrates how one might use RSpec to test the controller code that
# was generated by Rails when you ran the scaffold generator.
#
# It assumes that the implementation code is generated by the rails scaffold
# generator. If you are using any extension libraries to generate different
# controller code, this generated spec may or may not pass.
#
# It only uses APIs available in rails and/or rspec-rails. There are a number
# of tools you can use to make these specs even more expressive, but we're
# sticking to rails and rspec-rails APIs to keep things simple and stable.

RSpec.describe "/api/v1/photos", type: :request do
  # This should return the minimal set of attributes required to create a valid
  # Photo. As you add validations to Photo, be sure to
  # adjust the attributes here as well.
  let(:image) { faker_base64_image }
  let(:json_response) { JSON.parse(response.body) }
  let!(:photo) { create_photo(image) }

  describe "GET #index" do
    it "renders a successful response" do
      get photos_url, as: :json
      expect(response).to be_successful
    end

    it "returns correct Content-Type header" do
      get photos_url, as: :json
      expect(response.headers['Content-Type']).to start_with('application/vnd.api+json')
    end

    it "json body contains expected attributes" do
      get photos_url, as: :json
      expect(json_response.keys).to match_array(['data', 'jsonapi'])
    end

    it "returns a list of photos" do
      get photos_url, as: :json
      expect(json_response['data']).to be_a(Array)
    end

    it "returns a created photo" do
      get photos_url, as: :json
      photo_data = json_response['data'][0]
      expect(photo_data).to include(
        'id' => photo.id.to_s,
        'type' => 'photos',
        'attributes' => include(
          'title' => photo.title,
          'views' => photo.views,
          'created_at' => photo.created_at.iso8601(3),
          'updated_at' => photo.updated_at.iso8601(3)
        )
      )
    end
  end

  # describe "GET #show" do
  #   it "renders a successful response" do
  #     get photo_url(photo), as: :json
  #     expect(response).to be_successful
  #   end

  #   it "returns correct Content-Type header" do
  #     get photo_url(photo), as: :json
  #     expect(response.headers['Content-Type']).to start_with('application/vnd.api+json')
  #   end

  #   it "json body contains expected attributes" do
  #     get photo_url(photo), as: :json
  #     expect(json_response.keys).to match_array(['data', 'jsonapi'])
  #   end

  #   it "returns single photo" do
  #     get photo_url(photo), as: :json
  #     expect(json_response['data']).to be_a(Hash)
  #   end

  #   it "returns a created photo" do
  #     get photo_url(photo), as: :json
  #     json_response = JSON.parse(response.body)
  #     photo_data = json_response['data']
  #     expect(photo_data).to include(
  #       'id' => photo.id.to_s,
  #       'type' => 'photos',
  #       'attributes' => include(
  #         'title' => photo.title,
  #         'views' => photo.views,
  #         'created_at' => photo.created_at.iso8601(3),
  #         'updated_at' => photo.updated_at.iso8601(3)
  #       )
  #     )
  #   end
  # end

  # describe "POST /create" do
  #   context "with valid parameters" do
  #     it "creates a new Photo" do
  #       expect {
  #         post photos_url,
  #              params: { photo: valid_attributes }, headers: valid_headers, as: :json
  #       }.to change(Photo, :count).by(1)
  #     end

  #     it "renders a JSON response with the new photo" do
  #       post photos_url,
  #            params: { photo: valid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:created)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "does not create a new Photo" do
  #       expect {
  #         post photos_url,
  #              params: { photo: invalid_attributes }, as: :json
  #       }.to change(Photo, :count).by(0)
  #     end

  #     it "renders a JSON response with errors for the new photo" do
  #       post photos_url,
  #            params: { photo: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq("application/json")
  #     end
  #   end
  # end

  # describe "PATCH /update" do
  #   context "with valid parameters" do
  #     let(:new_attributes) {
  #       skip("Add a hash of attributes valid for your model")
  #     }

  #     it "updates the requested photo" do
  #       photo = Photo.create! valid_attributes
  #       patch photo_url(photo),
  #             params: { photo: new_attributes }, headers: valid_headers, as: :json
  #       photo.reload
  #       skip("Add assertions for updated state")
  #     end

  #     it "renders a JSON response with the photo" do
  #       photo = Photo.create! valid_attributes
  #       patch photo_url(photo),
  #             params: { photo: new_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:ok)
  #       expect(response.content_type).to match(a_string_including("application/json"))
  #     end
  #   end

  #   context "with invalid parameters" do
  #     it "renders a JSON response with errors for the photo" do
  #       photo = Photo.create! valid_attributes
  #       patch photo_url(photo),
  #             params: { photo: invalid_attributes }, headers: valid_headers, as: :json
  #       expect(response).to have_http_status(:unprocessable_entity)
  #       expect(response.content_type).to eq("application/json")
  #     end
  #   end
  # end

  # describe "DELETE /destroy" do
  #   it "destroys the requested photo" do
  #     photo = Photo.create! valid_attributes
  #     expect {
  #       delete photo_url(photo), headers: valid_headers, as: :json
  #     }.to change(Photo, :count).by(-1)
  #   end
  # end
end
